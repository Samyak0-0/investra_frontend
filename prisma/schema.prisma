// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  hashedPassword   String?
  phone            String?
  location         String?
  joinDate         DateTime @default(now())
  bio              String?
  avatar           String?
  riskTolerance    String?
  investmentGoals  String?
  preferredSectors String[]

  portfolio            Portfolio[]
  investmentPreference InvestmentPreference?

  @@map("users")
}


model InvestmentPreference {
  id                   Int     @id @default(autoincrement())
  userId               String  @unique
  riskTolerance        String?
  investmentHorizon    String?
  monthlyInvestment    Int?
  portfolioValue       Int?
  diversificationLevel String?

  user                 User    @relation(fields: [userId], references: [id])
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Portfolio {
  user_id    String
  stock_Name String
  stock_Amt  Int
  added_at   DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])

  @@id([user_id, stock_Name])
  @@map("portfolio")
}
